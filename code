#include <SFML/Graphics.hpp>
#include <iostream>
using namespace sf;
int main() {
	RenderWindow window(VideoMode(800, 600), "pong Game");

	Font font;
	font.loadFromFile("Nicolast.ttf");
	Text scoreText;
	scoreText.setFont(font);
	scoreText.setCharacterSize(24);
	scoreText.setFillColor(Color::White);
	scoreText.setPosition(50, 10);
	scoreText.setString("Score: " + 0);

	//create the left paddle
	RectangleShape leftPaddle(Vector2f(10, 100)); // size of the paddle
	leftPaddle.setPosition(10, 300); // starting pos for the left paddle

	// create the right paddle
	RectangleShape rightPaddle(Vector2f(10, 100)); // size of the paddle
	rightPaddle.setPosition(780, 300); // starting pos for the right paddle

	//create the ball
	CircleShape ball(10); //size of the ball (radius)
	ball.setPosition(400, 300); //starting pos of the ball

	// ball movement variables
	Vector2f ballvelocity(200, 200); //speed and direction of the ball

	int score = 0;

	// create a clock to keep game speech smooth
	Clock clock;

	while (window.isOpen()) { // Game Loop #################################################

		Time deltatime = clock.restart();
		float dt = deltatime.asSeconds();

		// input section
		Event event;
		while (window.pollEvent(event)) {
			if (event.type == Event::Closed)
				window.close();
		}

		//physics section

		ball.move(ballvelocity * dt);

		if (ball.getPosition().y <= 0 || ball.getPosition().y + ball.getRadius() * 2 >= 600) {
			ballvelocity.y = -ballvelocity.y; //reverse vertical direction
		}
		if (ball.getPosition().x <= 0 || ball.getPosition().x + ball.getRadius() * 2 >= 800) {
			ballvelocity.x = -ballvelocity.x; //reverse vertical direction
			score++; // update score
			scoreText.setString("Score: "  + (score));
		}

		//check for collision with the left paddle (manual calc)
		if (ball.getPosition().x <= leftPaddle.getPosition().x + 10 &&
			ball.getPosition().x + 20 >= leftPaddle.getPosition().x &&
			ball.getPosition().y + 20 >= leftPaddle.getPosition().y &&
			ball.getPosition().y <= leftPaddle.getPosition().y + 100) {
			ballvelocity.x = -ballvelocity.x; // reverse horizontal direction
		}

		//check for collision with the right paddle (manual calc)
		if (ball.getPosition().x <= rightPaddle.getPosition().x + 10 &&
			ball.getPosition().x + 20 >= rightPaddle.getPosition().x &&
			ball.getPosition().y + 20 >= rightPaddle.getPosition().y &&
			ball.getPosition().y <= rightPaddle.getPosition().y + 100) {
			ballvelocity.x = -ballvelocity.x; // reverse horizontal direction
		}

		// move the paddle up and down based on key presses
		if (Keyboard::isKeyPressed(Keyboard::W)) {
			leftPaddle.move(0, -400 * dt);
		}
		if (Keyboard::isKeyPressed(Keyboard::S)) {
			leftPaddle.move(0, 400 * dt);
		}

		if (Keyboard::isKeyPressed(Keyboard::Up)) {
			rightPaddle.move(0, -400 * dt);
		}
		if (Keyboard::isKeyPressed(Keyboard::Down)) {
			rightPaddle.move(0, 400 * dt);
		}

		//render section
		window.clear();

		window.draw(leftPaddle); // Draw the left paddle
		window.draw(rightPaddle); // draw the right paddle

		window.draw(ball); //draw the ball

		window.draw(scoreText);

		window.display();
	}//end of game loop######################################################
	return 0;
}
